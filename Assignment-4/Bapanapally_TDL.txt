# -----------------------------------------------
# Task [4]: implement temporal difference learning 
# -----------------------------------------------

import numpy as np
import matplotlib.pyplot as plt
import math
# here i only import functions that are necessary to this task 
# but feel free to import other functions to speed up implementation 
from functions import TrueTransProb, StateCodeBook, OptimalPolicy, Reward, Action, TrueUtility

# Let's setup the environment first (which is hidden to the agent!!)
reward = Reward()
TransProb = TrueTransProb()
policy = OptimalPolicy()  # fix an optimal policy (and we need to estimates its utilities)

# initialize state utilities as zeros
utility = np.zeros((3, 4))
utility[1, 3] = -1
utility[2, 3] = 1

# adajcent matrix 
AdjacentMatrix = np.zeros((11, 11))
for j in range(4):
    AdjacentMatrix = AdjacentMatrix + TransProb[:, :, j]
AdjacentMatrix = (AdjacentMatrix > 0) * 1
np.fill_diagonal(AdjacentMatrix, 0)


alpha = 0.001

def funcnewpolicy():
    newpolicy = np.random.randint(0,3,(3,4))
    return newpolicy


rmserror = np.zeros(10000)
tru = TrueUtility()

utilityplotarray = np.zeros((11,10000))
for z in range(10000):
    sum = 0
    for i in range(3):
        for j in range(4):
            k=i
            l=j
            if (i == 1 and (j != 1 and j != 3)) or (i == 2 and j != 3) or (i == 0):
                while True:
                    pr = np.random.uniform(0, 1)
                    if (pr < 0.5):
                        temppolicy = funcnewpolicy()
                    else:
                        temppolicy = OptimalPolicy()
                    i1, j1 = Action(k, l, temppolicy)
                    utility[k, l] = utility[k, l] + (alpha * (reward[k, l] + utility[i1, j1] - utility[k, l]))
                    if (i1, j1) == (1, 3) or (i1, j1) == (2, 3):
                        break
                    k = i1
                    l = j1
                utilityplotarray[StateCodeBook(i, j), z] = utility[i, j]
                sum = sum + (abs(utility[i, j] - tru[i, j]) ** 2)
            else:
                if not (i == 1 and j == 1):
                    utilityplotarray[StateCodeBook(i, j), z] = utility[i, j]

    rmserror[z] = math.sqrt(sum/9)

print(utility)
plt.plot(utilityplotarray[0], label='U(0,0)')
plt.plot(utilityplotarray[1], label='U(0,1)')
plt.plot(utilityplotarray[2], label='U(0,2)')
plt.plot(utilityplotarray[3], label='U(0,3)')
plt.plot(utilityplotarray[4], label='U(1,0)')
plt.plot(utilityplotarray[5], label='U(1,2)')
plt.plot(utilityplotarray[6], label='U(1,3)')
plt.plot(utilityplotarray[7], label='U(2,1)')
plt.plot(utilityplotarray[8], label='U(2,2)')
plt.plot(utilityplotarray[9], label='U(2,3)')
plt.plot(utilityplotarray[10], label='U(2,4)')
plt.legend(loc='lower center', shadow=True)
plt.xlabel('Iterations')
plt.ylabel('Utility estimates')
plt.show()

plt.plot(rmserror, label='RMS')
plt.legend()
plt.xlabel('Iterations')
plt.ylabel('RMS error in utility')
plt.show()

#print('Utilities:', Utilities[:, -1])
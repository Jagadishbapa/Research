
# -----------------------------------------------
# Task [3]: implement policy iteration algorithm
# -----------------------------------------------

import numpy as np
import matplotlib.pyplot as plt
# here i only import functions that are necessary to this task 
# but feel free to import other functions to speed up implementation 
from functions import TrueTransProb, StateCodeBook, Reward

reward = Reward()
# Let's setup the environment first 
TransProb = TrueTransProb() 

# randomly initialize state utilities 
utility = np.random.uniform(0,1,(3,4)) 
utility[1,3] = -1
utility[2,3] = 1

# randomly initialize policy 
policy = np.random.randint(0,3,(3,4)) 

# adajcent matrix 
AdjacentMatrix = np.zeros((11,11))
for j in range(4):        
    AdjacentMatrix = AdjacentMatrix + TransProb[:,:,j]
AdjacentMatrix = (AdjacentMatrix>0)*1
np.fill_diagonal(AdjacentMatrix,0) 

# now, implement the policy iteration algorithm 
# ...
# ...

probmatrix = [[0,0], [0,1], [0,2], [0,3], [1,0] , [1,2], [1,3], [2,0], [2,1], [2,2], [2,3]]

def Actionpolicy(i,j,poli):

    if (poli==0):
        i_new = np.min([i + 1 ,2])
        j_new = j
    # case 2: actually go down
    elif (poli==1):
        i_new = np.max([i - 1 ,0])
        j_new = j
    # case 3: actually go left
    elif (poli==2):
        j_new = np.max([j - 1 ,0])
        i_new = i
    # case 4: actually go right
    elif (poli==3):
        j_new = np.min([j + 1 ,3])
        i_new = i
    # make sure we do not go into rock (and if so, stay where we were)
    if (i_new,j_new) == (1,1):
        i_new = i
        j_new = j
    # now return new state
    return i_new, j_new


def up(i,j,k):
    sum=0
    actionset = set()
    for x in range(4):
        actionset.add(Actionpolicy(i, j, x))
    for y in actionset:
        sum+=TransProb[k,StateCodeBook(y[0],y[1]),0]*utility[probmatrix[StateCodeBook(y[0],y[1])][0],probmatrix[StateCodeBook(y[0],y[1])][1]]
    return sum

def down(i,j,k):
    sum=0
    actionset = set()
    for x in range(4):
        actionset.add(Actionpolicy(i, j, x))
    for y in actionset:
        sum += TransProb[k, StateCodeBook(y[0], y[1]), 1] * utility[
            probmatrix[StateCodeBook(y[0], y[1])][0], probmatrix[StateCodeBook(y[0], y[1])][1]]
    return sum

def left(i,j,k):
    sum=0
    actionset = set()
    for x in range(4):
        actionset.add(Actionpolicy(i, j, x))
    for y in actionset:
        sum += TransProb[k, StateCodeBook(y[0], y[1]), 2] * utility[
            probmatrix[StateCodeBook(y[0], y[1])][0], probmatrix[StateCodeBook(y[0], y[1])][1]]
    return sum

def right(i,j,k):
    sum=0
    actionset = set()
    for x in range(4):
        actionset.add(Actionpolicy(i, j, x))
    for y in actionset:
        sum += TransProb[k, StateCodeBook(y[0], y[1]), 3] * utility[
            probmatrix[StateCodeBook(y[0], y[1])][0], probmatrix[StateCodeBook(y[0], y[1])][1]]
    return sum

utilitymatrix = utility
temppolicy=policy

utilityplotarray = np.zeros((11,100))
for z in range(100):
    #print("utitlity")
    for i in range(3):
        for j in range(4):
            if (i == 1 and (j != 1 and j != 3)) or (i == 2 and j != 3) or (i == 0):
                upval = up(i,j, StateCodeBook(i,j))
                downval = down(i,j, StateCodeBook(i,j))
                rightval = right(i,j, StateCodeBook(i,j))
                leftval = left(i,j, StateCodeBook(i,j))
                #print (upval,rightval,downval,leftval)
                maxval = max(upval,rightval,downval,leftval)
                #print(maxval)
                #print(reward[i,j])
                utilitymatrix[i,j] = reward[i,j] + maxval
                if maxval == upval:
                    temppolicy[i,j] = 0
                if maxval == downval:
                    temppolicy[i,j] = 1
                if maxval == rightval:
                    temppolicy[i,j] = 3
                if maxval == leftval:
                    temppolicy[i,j] = 2
                utilityplotarray[StateCodeBook(i, j),z] = utilitymatrix[i, j]
            else:
                if not (i==1 and j==1):
                    utilityplotarray[StateCodeBook(i,j), z] = utilitymatrix[i,j]






#print(utilitymatrix)
                #utlityplotarray[z,StateCodeBook(i,j)] = utilitymatrix[i,j]

           # else:
                #utlityplotarray[z,StateCodeBook(i, j)] =


                #if(utilitymatrix[i,j]>utility[i,j]):
                   # utility[i,j]=utilitymatrix[i,j]
                    #policy[i,j] = temppolicy[i,j]

line1, = plt.plot(utilityplotarray[0], label="U(0,0)", linewidth=1)
line2, = plt.plot(utilityplotarray[1], label="U(0,1)", linewidth=1)
line3, = plt.plot(utilityplotarray[2], label="U(0,2)", linewidth=1)
line4, = plt.plot(utilityplotarray[3], label="U(0,3)", linewidth=1)
line5, = plt.plot(utilityplotarray[4], label="U(1,0)", linewidth=1)
line6, = plt.plot(utilityplotarray[5], label="U(1,2)", linewidth=1)
line7, = plt.plot(utilityplotarray[6], label="U(1,3)", linewidth=1)
line8, = plt.plot(utilityplotarray[7], label="U(2,0)", linewidth=1)
line9, = plt.plot(utilityplotarray[8], label="U(2,1)", linewidth=1)
line10, = plt.plot(utilityplotarray[9], label="U(2,2)", linewidth=1)
line11, = plt.plot(utilityplotarray[10], label="U(2,3)", linewidth=1)

#line1.set_label('U(0,0)')



utility=utilitymatrix
ploicy=temppolicy
print(utility)
print(policy)

plt.legend(loc='lower center', shadow=True)

plt.xlabel('Number of iterations')
plt.ylabel('Utility estimates', multialignment='center')
plt.show()


    
    



        
    
    
        
        
    
    
    

